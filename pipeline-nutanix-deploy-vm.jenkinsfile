pipeline {
agent any

parameters {
    string(name: 'Login', description: 'Login do Prism Element')
    password(name: 'Senha', description: 'Senha do Prism Element')
    string(name: 'VIP', description: 'IP do Cluster')
    string(name: 'HOSTNAME', defaultValue: 'CLIENTE-SRV01', description: 'Nome da VM no Nutanix')
    string(name: 'VHOSTNAME', defaultValue: 'SRV01', description: 'Nome da VM no S.O')
    password(name: 'VPASSWORD', description: 'Senha do S.O, usuario centos')
    string(name: 'DESCRICAO', defaultValue: 'wl5.small', description: 'Descrição da VM')
    string(name: 'CPU', defaultValue: '1', description: 'Número de vCPU')
    string(name: 'MEM', defaultValue: '1', description: 'RAM do servidor em GB')
    choice(name: 'NIC', choices: ['DEVOPS'], description: 'VLAN do Cliente')
    string(name: 'IP', defaultValue: '10.10.76.100', description: 'IP da VM')
    choice(name: 'IMAGE', choices: ['TEMPLATE-CENTOS7', 'TEMPLATE-UBUNTU20', 'TEMPLATE-UBUNTU18', 'TEMPLATE-W2K19-ENG'], description: 'S.O')
}
stages {

stage('Definindo variáveis') {
    steps {
        dir ('nutanix'){
        sh ("echo login=\\\"${params.Login}\\\" > vars.tfvars")
        sh ("echo password=\\\"${params.Senha}\\\" >> vars.tfvars")
        sh ("echo vip=\\\"${params.VIP}\\\" >> vars.tfvars")
        sh ("echo hostname=\\\"${params.HOSTNAME}\\\" >> vars.tfvars")
        sh ("echo vm_hostname=\\\"${params.VHOSTNAME}\\\" >> vars.tfvars")
        sh ("echo vm_password=\\\"${params.VPASSWORD}\\\" >> vars.tfvars")
        sh ("echo vcpu=\\\"${params.CPU}\\\" >> vars.tfvars")
        sh ("echo mem=\\\"${params.MEM}\\\" >> vars.tfvars")
        sh ("echo ip=\\\"${params.IP}\\\" >> vars.tfvars")
        sh ("echo nic=\\\"${params.NIC}\\\" >> vars.tfvars")
        sh ("echo image=\\\"${params.IMAGE}\\\" >> vars.tfvars")
        sh ("echo description=\\\"${params.DESCRICAO}\\\" >> vars.tfvars")
        }
    }
}

stage('Provisionando Infraestrutura') {

steps {
dir ('nutanix')
{
sh 'terraform init -input=false'
sh 'terraform plan -out=tfplan -input=false -var-file=vars.tfvars'
sh 'terraform apply -input=false tfplan'
sh 'rm -rf terraform.tfstate'
}
}
}

}
}
